{"ast":null,"code":"import Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class ProfileComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  ngOnInit() {}\n  OnChangePwButtonClicked(oldPw, newPw, confirmNewPw) {\n    // all fields must have an entry\n    if (!oldPw || !newPw || !confirmNewPw) {\n      Swal.fire({\n        title: 'Error',\n        html: 'Please fill in all fields!',\n        icon: 'error',\n        backdrop: false\n      });\n    }\n    // password does not fit criteria\n    else if (newPw.length < 8) {\n      Swal.fire({\n        title: 'Error',\n        html: 'New password must be at least 8 characters long',\n        icon: 'error',\n        backdrop: false\n      });\n    }\n    // passwords not matching\n    else if (newPw !== confirmNewPw) {\n      Swal.fire({\n        title: 'Error',\n        text: \"Passwords don't match\",\n        icon: 'error',\n        backdrop: false\n      });\n    }\n    // pw same as old\n    else if (newPw === oldPw) {\n      Swal.fire({\n        title: 'Error',\n        text: 'New password must not be the same as old password',\n        icon: 'error',\n        backdrop: false\n      });\n    }\n    // check if old pw is correct\n    // perform login to check if pw is correct, if status 200 then ok\n    else {\n      let email = this.authService.getUserEmail();\n      this.authService.login(email, oldPw).subscribe(res => {\n        if (res.status === 200) {\n          // perform pw change\n          console.log(\"allow pw change\");\n          this.authService.changePw(email, newPw).subscribe(res2 => {\n            // pw is changed but receiving an error here\n            // Unexpected token 'O', \\\"OK\\\" is not valid JSON\n            // if (res.status === 200) {\n            // pw changed\n            // console.log(res);\n            // }\n          });\n          Swal.fire({\n            title: 'Success',\n            text: 'Your password has been changed successfully!',\n            icon: 'success',\n            backdrop: false\n          }).then(() => {\n            this.router.navigate(['/']);\n          });\n        }\n      });\n    }\n  }\n}\nProfileComponent.ɵfac = function ProfileComponent_Factory(t) {\n  return new (t || ProfileComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router));\n};\nProfileComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ProfileComponent,\n  selectors: [[\"app-profile\"]],\n  decls: 29,\n  vars: 0,\n  consts: [[1, \"centered-content\"], [1, \"white-box\"], [1, \"change-password-title\", \"has-text-primary\"], [1, \"field\"], [1, \"control\", \"has-icons-left\", \"has-icons-right\"], [\"type\", \"password\", \"placeholder\", \"Old password\", 1, \"input\", \"has-background-light\"], [\"oldPwInput\", \"\"], [1, \"icon\", \"is-small\", \"is-left\"], [1, \"fas\", \"fa-key\"], [1, \"control\", \"has-icons-left\"], [\"type\", \"password\", \"placeholder\", \"New password\", 1, \"input\", \"has-background-light\"], [\"newPwInput\", \"\"], [\"type\", \"password\", \"placeholder\", \"Confirm new password\", 1, \"input\", \"has-background-light\"], [\"confirmNewPwInput\", \"\"], [1, \"buttons\", \"is-right\"], [\"routerLink\", \"/\", 1, \"button\", \"is-danger\", \"has-text-white\"], [1, \"button\", \"is-success\", \"has-text-white\", 3, \"click\"]],\n  template: function ProfileComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r3 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\", 2);\n      i0.ɵɵtext(3, \"Change Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"br\");\n      i0.ɵɵelementStart(5, \"div\", 3)(6, \"p\", 4);\n      i0.ɵɵelement(7, \"input\", 5, 6);\n      i0.ɵɵelementStart(9, \"span\", 7);\n      i0.ɵɵelement(10, \"i\", 8);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(11, \"div\", 3)(12, \"p\", 9);\n      i0.ɵɵelement(13, \"input\", 10, 11);\n      i0.ɵɵelementStart(15, \"span\", 7);\n      i0.ɵɵelement(16, \"i\", 8);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(17, \"div\", 3)(18, \"p\", 9);\n      i0.ɵɵelement(19, \"input\", 12, 13);\n      i0.ɵɵelementStart(21, \"span\", 7);\n      i0.ɵɵelement(22, \"i\", 8);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(23, \"br\");\n      i0.ɵɵelementStart(24, \"div\", 14)(25, \"button\", 15);\n      i0.ɵɵtext(26, \"Cancel\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"button\", 16);\n      i0.ɵɵlistener(\"click\", function ProfileComponent_Template_button_click_27_listener() {\n        i0.ɵɵrestoreView(_r3);\n        const _r0 = i0.ɵɵreference(8);\n        const _r1 = i0.ɵɵreference(14);\n        const _r2 = i0.ɵɵreference(20);\n        return i0.ɵɵresetView(ctx.OnChangePwButtonClicked(_r0.value, _r1.value, _r2.value));\n      });\n      i0.ɵɵtext(28, \"Change Password\");\n      i0.ɵɵelementEnd()()()();\n    }\n  },\n  dependencies: [i2.RouterLink],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Swal","ProfileComponent","constructor","authService","router","ngOnInit","OnChangePwButtonClicked","oldPw","newPw","confirmNewPw","fire","title","html","icon","backdrop","length","text","email","getUserEmail","login","subscribe","res","status","console","log","changePw","res2","then","navigate","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\MasterThesis\\Frontend\\src\\app\\pages\\profile\\profile.component.ts","C:\\MasterThesis\\Frontend\\src\\app\\pages\\profile\\profile.component.html"],"sourcesContent":["import { HttpResponse } from '@angular/common/http';\r\nimport { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from 'src/app/auth.service';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.scss']\r\n})\r\nexport class ProfileComponent {\r\n  constructor(private authService: AuthService, private router: Router){}\r\n\r\n  ngOnInit(){}\r\n\r\n  OnChangePwButtonClicked(oldPw: string, newPw: string, confirmNewPw: string){\r\n    // all fields must have an entry\r\n    if (!oldPw || !newPw || !confirmNewPw){\r\n      Swal.fire({\r\n        title: 'Error',\r\n        html: 'Please fill in all fields!',\r\n        icon: 'error',\r\n        backdrop: false\r\n      })\r\n    }\r\n\r\n    // password does not fit criteria\r\n    else if (newPw.length < 8){\r\n      Swal.fire({\r\n        title: 'Error',\r\n        html: 'New password must be at least 8 characters long',\r\n        icon: 'error',\r\n        backdrop: false\r\n      })\r\n    }\r\n\r\n    // passwords not matching\r\n    else if (newPw !== confirmNewPw){\r\n      Swal.fire({\r\n        title: 'Error',\r\n        text: \"Passwords don't match\",\r\n        icon: 'error',\r\n        backdrop: false\r\n      })\r\n    }\r\n\r\n    // pw same as old\r\n    else if (newPw === oldPw){\r\n      Swal.fire({\r\n        title: 'Error',\r\n        text: 'New password must not be the same as old password',\r\n        icon: 'error',\r\n        backdrop: false\r\n      })\r\n    }\r\n    \r\n    // check if old pw is correct\r\n    // perform login to check if pw is correct, if status 200 then ok\r\n    else{\r\n      let email = this.authService.getUserEmail();\r\n      this.authService.login(email, oldPw).subscribe((res: HttpResponse<any>) => {\r\n        if (res.status === 200) {\r\n          // perform pw change\r\n          console.log(\"allow pw change\");\r\n          this.authService.changePw(email, newPw).subscribe((res2: HttpResponse<any>) => {\r\n            // pw is changed but receiving an error here\r\n            // Unexpected token 'O', \\\"OK\\\" is not valid JSON\r\n\r\n            // if (res.status === 200) {\r\n              // pw changed\r\n              // console.log(res);\r\n            // }\r\n          })\r\n          Swal.fire({\r\n            title: 'Success',\r\n            text: 'Your password has been changed successfully!',\r\n            icon: 'success',\r\n            backdrop: false\r\n          }).then(() => {\r\n            this.router.navigate(['/']);\r\n          })\r\n          \r\n        }\r\n      })\r\n    }\r\n    \r\n  }\r\n}","<div class=\"centered-content\">\r\n    <div class=\"white-box\">\r\n  \r\n      <h1 class=\"change-password-title has-text-primary\">Change Password</h1>\r\n      <br>\r\n      <div class=\"field\">\r\n        <p class=\"control has-icons-left has-icons-right\">\r\n          <input #oldPwInput class=\"input has-background-light\" type=\"password\" placeholder=\"Old password\">\r\n          <span class=\"icon is-small is-left\">\r\n            <i class=\"fas fa-key\"></i>\r\n          </span>\r\n        </p>\r\n      </div>\r\n      <div class=\"field\">\r\n        <p class=\"control has-icons-left\">\r\n          <input #newPwInput class=\"input has-background-light\" type=\"password\" placeholder=\"New password\">\r\n          <span class=\"icon is-small is-left\">\r\n            <i class=\"fas fa-key\"></i>\r\n          </span>\r\n        </p>\r\n      </div>\r\n      <div class=\"field\">\r\n        <p class=\"control has-icons-left\">\r\n          <input #confirmNewPwInput class=\"input has-background-light\" type=\"password\" placeholder=\"Confirm new password\">\r\n          <span class=\"icon is-small is-left\">\r\n            <i class=\"fas fa-key\"></i>\r\n          </span>\r\n        </p>\r\n      </div>\r\n      <br>\r\n      <div class=\"buttons is-right\">\r\n          <button class=\"button is-danger has-text-white\" routerLink=\"/\">Cancel</button>\r\n          <button class=\"button is-success has-text-white\" (click)=\"OnChangePwButtonClicked(oldPwInput.value, newPwInput.value, confirmNewPwInput.value)\">Change Password</button>\r\n      </div>\r\n    </div>\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}