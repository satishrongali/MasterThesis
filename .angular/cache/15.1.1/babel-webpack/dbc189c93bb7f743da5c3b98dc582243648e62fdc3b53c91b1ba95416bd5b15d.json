{"ast":null,"code":"import { throwError, empty, Subject } from 'rxjs';\nimport { catchError, tap, switchMap } from 'rxjs/operators';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class WebReqInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n    this.accessTokenRefreshed = new Subject();\n  }\n  intercept(request, next) {\n    // Handle the request\n    request = this.addAuthHeader(request);\n    // call next() and handle response\n    return next.handle(request).pipe(catchError(error => {\n      console.log(error);\n      // const login_url = \"http://localhost:3000/users/login\";\n      // const users_url = \"http://localhost:3000/users\";\n      // const admin_url = \"http://localhost:3000/admin\";\n      const login_url = \"/users/login\";\n      const users_url = \"/users\";\n      const admin_url = \"/admin\";\n      if (error.status === 401 && error.url === admin_url) {\n        // user is not admin\n        return empty();\n      } else if (error.status === 401) {\n        // 401 so we are unauthorized\n        // refresh access token\n        return this.refreshAccessToken().pipe(switchMap(() => {\n          request = this.addAuthHeader(request);\n          return next.handle(request);\n        }), catchError(err => {\n          console.log(err);\n          this.authService.logout();\n          return empty();\n        }));\n      } else if (error.url === login_url) {\n        Swal.fire({\n          title: 'Error',\n          text: 'Please check your credentials',\n          icon: 'error',\n          backdrop: false\n        });\n      } else if (error.url === users_url && error.status === 400) {\n        if (error.error.code && error.error.code === 11000) {\n          Swal.fire({\n            title: 'Error',\n            html: 'Email already registered. Please log in.',\n            icon: 'error',\n            backdrop: false\n          });\n        } else {\n          Swal.fire({\n            title: 'Error',\n            html: '1. Email must be at least 1 character long. <br>2. Password must be at least 8 characters long.',\n            icon: 'error',\n            backdrop: false\n          });\n        }\n      }\n      return throwError(error);\n    }));\n  }\n  refreshAccessToken() {\n    this.refreshingAccessToken = true;\n    // we want to call a method to send a request to refresh access token\n    return this.authService.getNewAccessToken().pipe(tap(() => {\n      this.refreshingAccessToken = false;\n      console.log(\"Access Token Refreshed!\");\n    }));\n  }\n  addAuthHeader(request) {\n    // get access token\n    const token = this.authService.getAccessToken();\n    if (token) {\n      // append access token to req header\n      return request.clone({\n        setHeaders: {\n          'x-access-token': token\n        }\n      });\n    }\n    return request;\n  }\n}\nWebReqInterceptor.ɵfac = function WebReqInterceptor_Factory(t) {\n  return new (t || WebReqInterceptor)(i0.ɵɵinject(i1.AuthService));\n};\nWebReqInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebReqInterceptor,\n  factory: WebReqInterceptor.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["throwError","empty","Subject","catchError","tap","switchMap","Swal","WebReqInterceptor","constructor","authService","intercept","request","next","addAuthHeader","handle","pipe","error","console","log","login_url","users_url","admin_url","status","url","refreshAccessToken","err","logout","fire","title","text","icon","backdrop","code","html","refreshingAccessToken","getNewAccessToken","token","getAccessToken","clone","setHeaders","factory","providedIn"],"sourceRoot":"","sources":["C:\\new project\\MyTaskManager\\frontend\\src\\app\\web-req.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError, empty, Subject } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\nimport { catchError, tap, switchMap } from 'rxjs/operators';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WebReqInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private authService: AuthService) { }\r\n\r\n  refreshingAccessToken: boolean | undefined;\r\n  accessTokenRefreshed: Subject<any> = new Subject();\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<any> {\r\n    // Handle the request\r\n\r\n    request = this.addAuthHeader(request);\r\n\r\n    // call next() and handle response\r\n    return next.handle(request).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n\r\n        console.log(error);\r\n        // const login_url = \"http://localhost:3000/users/login\";\r\n        // const users_url = \"http://localhost:3000/users\";\r\n        // const admin_url = \"http://localhost:3000/admin\";\r\n\r\n        const login_url = \"/users/login\";\r\n        const users_url = \"/users\";\r\n        const admin_url = \"/admin\";\r\n\r\n        if (error.status === 401 && error.url === admin_url){\r\n          // user is not admin\r\n\r\n          return empty();\r\n        }\r\n        \r\n        else if (error.status === 401){\r\n          // 401 so we are unauthorized\r\n\r\n          // refresh access token\r\n          return this.refreshAccessToken()\r\n          .pipe(\r\n            switchMap(() => {\r\n              request = this.addAuthHeader(request);\r\n              return next.handle(request);\r\n            }),\r\n            catchError((err: any) => {\r\n              console.log(err);\r\n              this.authService.logout();\r\n              return empty();\r\n            })\r\n          )\r\n        }\r\n\r\n        else if (error.url === login_url){\r\n            Swal.fire({\r\n              title: 'Error',\r\n              text: 'Please check your credentials',\r\n              icon: 'error',\r\n              backdrop: false\r\n          })\r\n        }\r\n\r\n        else if (error.url === users_url && error.status === 400){\r\n          if (error.error.code && error.error.code === 11000){\r\n            Swal.fire({\r\n              title: 'Error',\r\n              html: 'Email already registered. Please log in.',\r\n              icon: 'error',\r\n              backdrop: false\r\n          })\r\n          }\r\n          else{\r\n            Swal.fire({\r\n              title: 'Error',\r\n              html: '1. Email must be at least 1 character long. <br>2. Password must be at least 8 characters long.',\r\n              icon: 'error',\r\n              backdrop: false\r\n          })\r\n        }\r\n        }\r\n\r\n        return throwError(error);\r\n      })\r\n    )\r\n  }\r\n\r\n refreshAccessToken(){\r\n    this.refreshingAccessToken = true;\r\n    // we want to call a method to send a request to refresh access token\r\n    return this.authService.getNewAccessToken().pipe(\r\n      tap(() => {\r\n        this.refreshingAccessToken = false;\r\n        console.log(\"Access Token Refreshed!\");\r\n      })\r\n    )\r\n  }\r\n\r\n  addAuthHeader(request: HttpRequest<any>){\r\n    // get access token\r\n    const token = this.authService.getAccessToken();\r\n\r\n    if (token) {\r\n          // append access token to req header\r\n          return request.clone({\r\n            setHeaders: {\r\n              'x-access-token': token\r\n            }\r\n          })\r\n    }\r\n    return request;\r\n\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}