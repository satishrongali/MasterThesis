{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WebRequestService {\n  constructor(http) {\n    this.http = http;\n    if (process.env.NODE_ENV == 'production') {\n      this.ROOT_URL = '';\n    } else {\n      this.ROOT_URL = 'http://localhost:3000';\n    }\n    //this.ROOT_URL = '';\n  }\n\n  get(uri) {\n    return this.http.get(`${this.ROOT_URL}/${uri}`);\n  }\n  post(uri, payload) {\n    return this.http.post(`${this.ROOT_URL}/${uri}`, payload);\n  }\n  patch(uri, payload) {\n    return this.http.patch(`${this.ROOT_URL}/${uri}`, payload);\n  }\n  put(uri, payload) {\n    return this.http.put(`${this.ROOT_URL}/${uri}`, payload);\n  }\n  delete(uri) {\n    return this.http.delete(`${this.ROOT_URL}/${uri}`);\n  }\n  login(email, password) {\n    return this.http.post(`${this.ROOT_URL}/users/login`, {\n      email,\n      password\n    }, {\n      observe: 'response'\n    });\n  }\n  signup(email, password) {\n    return this.http.post(`${this.ROOT_URL}/users`, {\n      email,\n      password\n    }, {\n      observe: 'response'\n    });\n  }\n  changePw(email, password, userId) {\n    return this.http.put(`${this.ROOT_URL}/users/${userId}`, {\n      email,\n      password\n    }, {\n      observe: 'response'\n    });\n  }\n}\nWebRequestService.ɵfac = function WebRequestService_Factory(t) {\n  return new (t || WebRequestService)(i0.ɵɵinject(i1.HttpClient));\n};\nWebRequestService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebRequestService,\n  factory: WebRequestService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,iBAAiB;EAI5BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IACtB,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,IAAI,YAAY,EACxC;MACE,IAAI,CAACC,QAAQ,GAAG,EAAE;KACnB,MACG;MACF,IAAI,CAACA,QAAQ,GAAG,uBAAuB;;IAEzC;EAEJ;;EAEEC,GAAG,CAACC,GAAW;IACb,OAAO,IAAI,CAACN,IAAI,CAACK,GAAG,CAAC,GAAG,IAAI,CAACD,QAAQ,IAAIE,GAAG,EAAE,CAAC;EACjD;EAEAC,IAAI,CAACD,GAAW,EAAEE,OAAe;IAC/B,OAAO,IAAI,CAACR,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACH,QAAQ,IAAIE,GAAG,EAAE,EAAEE,OAAO,CAAC;EAC3D;EAEAC,KAAK,CAACH,GAAW,EAAEE,OAAe;IAChC,OAAO,IAAI,CAACR,IAAI,CAACS,KAAK,CAAC,GAAG,IAAI,CAACL,QAAQ,IAAIE,GAAG,EAAE,EAAEE,OAAO,CAAC;EAC5D;EAEAE,GAAG,CAACJ,GAAW,EAAEE,OAAe;IAC9B,OAAO,IAAI,CAACR,IAAI,CAACU,GAAG,CAAC,GAAG,IAAI,CAACN,QAAQ,IAAIE,GAAG,EAAE,EAAEE,OAAO,CAAC;EAC1D;EAEAG,MAAM,CAACL,GAAW;IAChB,OAAO,IAAI,CAACN,IAAI,CAACW,MAAM,CAAC,GAAG,IAAI,CAACP,QAAQ,IAAIE,GAAG,EAAE,CAAC;EACpD;EAEAM,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACd,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACH,QAAQ,cAAc,EAAE;MACpDS,KAAK;MACLC;KACD,EAAE;MACDC,OAAO,EAAE;KACV,CAAC;EACJ;EAEAC,MAAM,CAACH,KAAa,EAAEC,QAAgB;IACpC,OAAO,IAAI,CAACd,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACH,QAAQ,QAAQ,EAAE;MAC9CS,KAAK;MACLC;KACD,EAAE;MACDC,OAAO,EAAE;KACV,CAAC;EACJ;EAEAE,QAAQ,CAACJ,KAAa,EAAEC,QAAgB,EAAEI,MAAc;IACtD,OAAO,IAAI,CAAClB,IAAI,CAACU,GAAG,CAAC,GAAG,IAAI,CAACN,QAAQ,UAAUc,MAAM,EAAE,EAAE;MACvDL,KAAK;MACLC;KACD,EAAE;MACDC,OAAO,EAAE;KACV,CAAC;EACJ;;AA7DWjB,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAqB,SAAjBrB,iBAAiB;EAAAsB,YAFhB;AAAM","names":["WebRequestService","constructor","http","process","env","NODE_ENV","ROOT_URL","get","uri","post","payload","patch","put","delete","login","email","password","observe","signup","changePw","userId","factory","providedIn"],"sourceRoot":"","sources":["C:\\new project\\MyTaskManager\\frontend\\src\\app\\web-request.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { response } from 'express';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WebRequestService {\r\n\r\n  readonly ROOT_URL;\r\n\r\n  constructor(private http: HttpClient) {\r\n    if (process.env.NODE_ENV == 'production')\r\n    {\r\n      this.ROOT_URL = ''\r\n    }\r\n    else{\r\n      this.ROOT_URL = 'http://localhost:3000';\r\n    } \r\n    //this.ROOT_URL = '';\r\n    \r\n}\r\n\r\n  get(uri: string) {\r\n    return this.http.get(`${this.ROOT_URL}/${uri}`);\r\n  }\r\n\r\n  post(uri: string, payload: Object) {\r\n    return this.http.post(`${this.ROOT_URL}/${uri}`, payload);\r\n  }\r\n\r\n  patch(uri: string, payload: Object) {\r\n    return this.http.patch(`${this.ROOT_URL}/${uri}`, payload);\r\n  }\r\n\r\n  put(uri: string, payload: Object) {\r\n    return this.http.put(`${this.ROOT_URL}/${uri}`, payload);\r\n  }\r\n\r\n  delete(uri: string) {\r\n    return this.http.delete(`${this.ROOT_URL}/${uri}`);\r\n  }\r\n\r\n  login(email: string, password: string) {\r\n    return this.http.post(`${this.ROOT_URL}/users/login`, {\r\n      email,\r\n      password\r\n    }, { \r\n      observe: 'response' \r\n    });\r\n  }\r\n\r\n  signup(email: string, password: string) {\r\n    return this.http.post(`${this.ROOT_URL}/users`, {\r\n      email,\r\n      password\r\n    }, { \r\n      observe: 'response'\r\n    });\r\n  }\r\n\r\n  changePw(email: string, password: string, userId: string){\r\n    return this.http.put(`${this.ROOT_URL}/users/${userId}`, {\r\n      email,\r\n      password\r\n    }, {\r\n      observe: 'response' \r\n    });\r\n  }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}